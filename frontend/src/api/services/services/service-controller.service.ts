/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createService } from '../fn/service-controller/create-service';
import { CreateService$Params } from '../fn/service-controller/create-service';
import { deleteService } from '../fn/service-controller/delete-service';
import { DeleteService$Params } from '../fn/service-controller/delete-service';
import { getAllServices } from '../fn/service-controller/get-all-services';
import { GetAllServices$Params } from '../fn/service-controller/get-all-services';
import { getServiceById } from '../fn/service-controller/get-service-by-id';
import { GetServiceById$Params } from '../fn/service-controller/get-service-by-id';
import { Services } from '../models/services';
import { updateService } from '../fn/service-controller/update-service';
import { UpdateService$Params } from '../fn/service-controller/update-service';

@Injectable({ providedIn: 'root' })
export class ServiceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createService()` */
  static readonly CreateServicePath = '/services/create/office/{officeId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createService()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createService$Response(params: CreateService$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createService(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createService$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createService(params: CreateService$Params, context?: HttpContext): Observable<{
}> {
    return this.createService$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateService()` */
  static readonly UpdateServicePath = '/services/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateService()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateService$Response(params: UpdateService$Params, context?: HttpContext): Observable<StrictHttpResponse<Services>> {
    return updateService(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateService$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateService(params: UpdateService$Params, context?: HttpContext): Observable<Services> {
    return this.updateService$Response(params, context).pipe(
      map((r: StrictHttpResponse<Services>): Services => r.body)
    );
  }

  /** Path part for operation `getServiceById()` */
  static readonly GetServiceByIdPath = '/services/get/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getServiceById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServiceById$Response(params: GetServiceById$Params, context?: HttpContext): Observable<StrictHttpResponse<Services>> {
    return getServiceById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getServiceById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServiceById(params: GetServiceById$Params, context?: HttpContext): Observable<Services> {
    return this.getServiceById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Services>): Services => r.body)
    );
  }

  /** Path part for operation `getAllServices()` */
  static readonly GetAllServicesPath = '/services/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllServices()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllServices$Response(params?: GetAllServices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Services>>> {
    return getAllServices(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllServices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllServices(params?: GetAllServices$Params, context?: HttpContext): Observable<Array<Services>> {
    return this.getAllServices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Services>>): Array<Services> => r.body)
    );
  }

  /** Path part for operation `deleteService()` */
  static readonly DeleteServicePath = '/services/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteService()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteService$Response(params: DeleteService$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteService(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteService$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteService(params: DeleteService$Params, context?: HttpContext): Observable<void> {
    return this.deleteService$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
