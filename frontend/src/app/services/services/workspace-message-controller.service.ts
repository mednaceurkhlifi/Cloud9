/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getModuleMessages } from '../fn/workspace-message-controller/get-module-messages';
import { GetModuleMessages$Params } from '../fn/workspace-message-controller/get-module-messages';
import { getProjectMessages } from '../fn/workspace-message-controller/get-project-messages';
import { GetProjectMessages$Params } from '../fn/workspace-message-controller/get-project-messages';
import { getTaskMessages } from '../fn/workspace-message-controller/get-task-messages';
import { GetTaskMessages$Params } from '../fn/workspace-message-controller/get-task-messages';
import { getWorkspaceMessages } from '../fn/workspace-message-controller/get-workspace-messages';
import { GetWorkspaceMessages$Params } from '../fn/workspace-message-controller/get-workspace-messages';
import { MessageDto } from '../models/message-dto';
import { MessageResponse } from '../models/message-response';
import { sendMessage } from '../fn/workspace-message-controller/send-message';
import { SendMessage$Params } from '../fn/workspace-message-controller/send-message';
import { WorkspaceMessage } from '../models/workspace-message';
import { DocumentRequest } from '../models/document-request';

@Injectable({ providedIn: 'root' })
export class WorkspaceMessageControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `sendMessage()` */
  static readonly SendMessagePath = '/ws-msg/send-message/{target}/{targetId}/{sender_email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendMessage()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  sendMessage$Response(params: SendMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDto>> {
    return sendMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendMessage$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  sendMessage(params: SendMessage$Params, context?: HttpContext): Observable<MessageDto> {
    return this.sendMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageDto>): MessageDto => r.body)
    );
  }

  /** Path part for operation `getWorkspaceMessages()` */
  static readonly GetWorkspaceMessagesPath = '/ws-msg/get-workspace-messages/{workspaceId}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWorkspaceMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkspaceMessages$Response(params: GetWorkspaceMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return getWorkspaceMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWorkspaceMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkspaceMessages(params: GetWorkspaceMessages$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.getWorkspaceMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }

  /** Path part for operation `getProjectMessages()` */
  static readonly GetProjectMessagesPath = '/ws-msg/get-project-messages/{projectId}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectMessages$Response(params: GetProjectMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return getProjectMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectMessages(params: GetProjectMessages$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.getProjectMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }

  /** Path part for operation `getModuleMessages()` */
  static readonly GetModuleMessagesPath = '/ws-msg/get-module-messages/{moduleId}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getModuleMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getModuleMessages$Response(params: GetModuleMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return getModuleMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getModuleMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getModuleMessages(params: GetModuleMessages$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.getModuleMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }

  /** Path part for operation `getTaskMessages()` */
  static readonly GetTaskMessagesPath = '/ws-msg/get-messages/{taskId}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskMessages$Response(params: GetTaskMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return getTaskMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskMessages(params: GetTaskMessages$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.getTaskMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }
    /**** manually added methods ****/
    sendMessageToTarget(target: number, targetId: number, user_email: string,  workspaceMsg: WorkspaceMessage ,attachment_request: DocumentRequest[], attachments: File[]): Observable<WorkspaceMessage> {
        const formData = new FormData();
        formData.append('message', new Blob([JSON.stringify(workspaceMsg)], { type: 'application/json' }));
        formData.append('attachment_request', new Blob([JSON.stringify(attachment_request)], { type: 'application/json' }));
        for (let att of attachments) {
            formData.append('attachments', att);
        }

        return this.http.post<WorkspaceMessage>(`http://localhost:8082/api/v1/ws-msg/send-message/${target}/${targetId}/${user_email}`, formData);
    }

}
