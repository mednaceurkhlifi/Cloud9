/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { DocumentRequest } from '../../models/document-request';
import { MessageDto } from '../../models/message-dto';
import { WorkspaceMessage } from '../../models/workspace-message';

export interface SendMessage$Params {
  targetId: number;
  target: number;
  sender_email: string;
      body?: {
'message': WorkspaceMessage;
'attachment_request'?: Array<DocumentRequest>;
'attachments'?: Array<Blob>;
}
}

export function sendMessage(http: HttpClient, rootUrl: string, params: SendMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageDto>> {
  const rb = new RequestBuilder(rootUrl, sendMessage.PATH, 'post');
  if (params) {
    rb.path('targetId', params.targetId, {});
    rb.path('target', params.target, {});
    rb.path('sender_email', params.sender_email, {});
    rb.body(params.body, 'multipart/form-data');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<MessageDto>;
    })
  );
}

sendMessage.PATH = '/ws-msg/send-message/{target}/{targetId}/{sender_email}';
