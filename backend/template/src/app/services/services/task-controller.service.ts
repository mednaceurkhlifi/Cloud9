/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addTaskToModule } from '../fn/task-controller/add-task-to-module';
import { AddTaskToModule$Params } from '../fn/task-controller/add-task-to-module';
import { addTaskToProject } from '../fn/task-controller/add-task-to-project';
import { AddTaskToProject$Params } from '../fn/task-controller/add-task-to-project';
import { assignUserToTask } from '../fn/task-controller/assign-user-to-task';
import { AssignUserToTask$Params } from '../fn/task-controller/assign-user-to-task';
import { deleteTask } from '../fn/task-controller/delete-task';
import { DeleteTask$Params } from '../fn/task-controller/delete-task';
import { getTaskById } from '../fn/task-controller/get-task-by-id';
import { GetTaskById$Params } from '../fn/task-controller/get-task-by-id';
import { getTaskByProject } from '../fn/task-controller/get-task-by-project';
import { GetTaskByProject$Params } from '../fn/task-controller/get-task-by-project';
import { getTasksByModule } from '../fn/task-controller/get-tasks-by-module';
import { GetTasksByModule$Params } from '../fn/task-controller/get-tasks-by-module';
import { getTasksByUserEmail } from '../fn/task-controller/get-tasks-by-user-email';
import { GetTasksByUserEmail$Params } from '../fn/task-controller/get-tasks-by-user-email';
import { removeUserFromTask } from '../fn/task-controller/remove-user-from-task';
import { RemoveUserFromTask$Params } from '../fn/task-controller/remove-user-from-task';
import { Task } from '../models/task';
import { TaskResponse } from '../models/task-response';
import { updateTask } from '../fn/task-controller/update-task';
import { UpdateTask$Params } from '../fn/task-controller/update-task';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class TaskControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addTaskToProject()` */
  static readonly AddTaskToProjectPath = '/task/add-task-project/{project_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTaskToProject()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addTaskToProject$Response(params: AddTaskToProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return addTaskToProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTaskToProject$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addTaskToProject(params: AddTaskToProject$Params, context?: HttpContext): Observable<Task> {
    return this.addTaskToProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `addTaskToModule()` */
  static readonly AddTaskToModulePath = '/task/add-task-module/{module_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTaskToModule()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addTaskToModule$Response(params: AddTaskToModule$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return addTaskToModule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTaskToModule$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addTaskToModule(params: AddTaskToModule$Params, context?: HttpContext): Observable<Task> {
    return this.addTaskToModule$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/task/update-task/{task_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<Task> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `removeUserFromTask()` */
  static readonly RemoveUserFromTaskPath = '/task/remove-user/{task_id}/{user_email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeUserFromTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUserFromTask$Response(params: RemoveUserFromTask$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return removeUserFromTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeUserFromTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUserFromTask(params: RemoveUserFromTask$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.removeUserFromTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `assignUserToTask()` */
  static readonly AssignUserToTaskPath = '/task/assign-user/{task_id}/{user_email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignUserToTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignUserToTask$Response(params: AssignUserToTask$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return assignUserToTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignUserToTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignUserToTask(params: AssignUserToTask$Params, context?: HttpContext): Observable<UserDto> {
    return this.assignUserToTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getTasksByUserEmail()` */
  static readonly GetTasksByUserEmailPath = '/task/get-user-tasks/{user_email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByUserEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByUserEmail$Response(params: GetTasksByUserEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getTasksByUserEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByUserEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByUserEmail(params: GetTasksByUserEmail$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getTasksByUserEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

  /** Path part for operation `getTaskByProject()` */
  static readonly GetTaskByProjectPath = '/task/get-task-by-project/{project_id}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskByProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskByProject$Response(params: GetTaskByProject$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskResponse>> {
    return getTaskByProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskByProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskByProject(params: GetTaskByProject$Params, context?: HttpContext): Observable<TaskResponse> {
    return this.getTaskByProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskResponse>): TaskResponse => r.body)
    );
  }

  /** Path part for operation `getTasksByModule()` */
  static readonly GetTasksByModulePath = '/task/get-task-by-module/{module_id}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByModule()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByModule$Response(params: GetTasksByModule$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskResponse>> {
    return getTasksByModule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByModule$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByModule(params: GetTasksByModule$Params, context?: HttpContext): Observable<TaskResponse> {
    return this.getTasksByModule$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskResponse>): TaskResponse => r.body)
    );
  }

  /** Path part for operation `getTaskById()` */
  static readonly GetTaskByIdPath = '/task/get-task-by-id/{task_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById$Response(params: GetTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return getTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById(params: GetTaskById$Params, context?: HttpContext): Observable<Task> {
    return this.getTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/task/delete-task/{task_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
