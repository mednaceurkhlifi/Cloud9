/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProjectManager } from '../fn/project-user-controller/add-project-manager';
import { AddProjectManager$Params } from '../fn/project-user-controller/add-project-manager';
import { addProjectMember } from '../fn/project-user-controller/add-project-member';
import { AddProjectMember$Params } from '../fn/project-user-controller/add-project-member';
import { deleteProjectUser } from '../fn/project-user-controller/delete-project-user';
import { DeleteProjectUser$Params } from '../fn/project-user-controller/delete-project-user';
import { getProjects } from '../fn/project-user-controller/get-projects';
import { GetProjects$Params } from '../fn/project-user-controller/get-projects';
import { ProjectUserResponse } from '../models/project-user-response';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class ProjectUserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addProjectMember()` */
  static readonly AddProjectMemberPath = '/project-user/add-project-member/{project_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProjectMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProjectMember$Response(params: AddProjectMember$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return addProjectMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProjectMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProjectMember(params: AddProjectMember$Params, context?: HttpContext): Observable<UserDto> {
    return this.addProjectMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `addProjectManager()` */
  static readonly AddProjectManagerPath = '/project-user/add-project-manager';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProjectManager()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProjectManager$Response(params: AddProjectManager$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return addProjectManager(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProjectManager$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProjectManager(params: AddProjectManager$Params, context?: HttpContext): Observable<UserDto> {
    return this.addProjectManager$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getProjects()` */
  static readonly GetProjectsPath = '/project-user/get-projects/{user_id}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjects$Response(params: GetProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectUserResponse>> {
    return getProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjects(params: GetProjects$Params, context?: HttpContext): Observable<ProjectUserResponse> {
    return this.getProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectUserResponse>): ProjectUserResponse => r.body)
    );
  }

  /** Path part for operation `deleteProjectUser()` */
  static readonly DeleteProjectUserPath = '/project-user/delete-project-user/{project_id}/{user_email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProjectUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectUser$Response(params: DeleteProjectUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return deleteProjectUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProjectUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectUser(params: DeleteProjectUser$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.deleteProjectUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
