/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addModule } from '../fn/module-controller/add-module';
import { AddModule$Params } from '../fn/module-controller/add-module';
import { deleteModule } from '../fn/module-controller/delete-module';
import { DeleteModule$Params } from '../fn/module-controller/delete-module';
import { getModuleById } from '../fn/module-controller/get-module-by-id';
import { GetModuleById$Params } from '../fn/module-controller/get-module-by-id';
import { getModulesByProject } from '../fn/module-controller/get-modules-by-project';
import { GetModulesByProject$Params } from '../fn/module-controller/get-modules-by-project';
import { ModuleResponse } from '../models/module-response';
import { ProjectModule } from '../models/project-module';
import { ProjectModuleProjection } from '../models/project-module-projection';
import { updateModule } from '../fn/module-controller/update-module';
import { UpdateModule$Params } from '../fn/module-controller/update-module';

@Injectable({ providedIn: 'root' })
export class ModuleControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addModule()` */
  static readonly AddModulePath = '/project-module/add-module/{project_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addModule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addModule$Response(params: AddModule$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectModule>> {
    return addModule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addModule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addModule(params: AddModule$Params, context?: HttpContext): Observable<ProjectModule> {
    return this.addModule$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectModule>): ProjectModule => r.body)
    );
  }

  /** Path part for operation `updateModule()` */
  static readonly UpdateModulePath = '/project-module/update-module/{module_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateModule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateModule$Response(params: UpdateModule$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectModule>> {
    return updateModule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateModule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateModule(params: UpdateModule$Params, context?: HttpContext): Observable<ProjectModule> {
    return this.updateModule$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectModule>): ProjectModule => r.body)
    );
  }

  /** Path part for operation `getModulesByProject()` */
  static readonly GetModulesByProjectPath = '/project-module/get-modules/{project_id}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getModulesByProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getModulesByProject$Response(params: GetModulesByProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ModuleResponse>> {
    return getModulesByProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getModulesByProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getModulesByProject(params: GetModulesByProject$Params, context?: HttpContext): Observable<ModuleResponse> {
    return this.getModulesByProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ModuleResponse>): ModuleResponse => r.body)
    );
  }

  /** Path part for operation `getModuleById()` */
  static readonly GetModuleByIdPath = '/project-module/get-module/{module_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getModuleById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getModuleById$Response(params: GetModuleById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectModuleProjection>> {
    return getModuleById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getModuleById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getModuleById(params: GetModuleById$Params, context?: HttpContext): Observable<ProjectModuleProjection> {
    return this.getModuleById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectModuleProjection>): ProjectModuleProjection => r.body)
    );
  }

  /** Path part for operation `deleteModule()` */
  static readonly DeleteModulePath = '/project-module/delete-module/{module_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteModule()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteModule$Response(params: DeleteModule$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return deleteModule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteModule$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteModule(params: DeleteModule$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.deleteModule$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
