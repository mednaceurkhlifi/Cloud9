/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createWorkspace } from '../fn/workspace-controller/create-workspace';
import { CreateWorkspace$Params } from '../fn/workspace-controller/create-workspace';
import { deleteWorkspace } from '../fn/workspace-controller/delete-workspace';
import { DeleteWorkspace$Params } from '../fn/workspace-controller/delete-workspace';
import { getWorkspace } from '../fn/workspace-controller/get-workspace';
import { GetWorkspace$Params } from '../fn/workspace-controller/get-workspace';
import { updateWorkspace } from '../fn/workspace-controller/update-workspace';
import { UpdateWorkspace$Params } from '../fn/workspace-controller/update-workspace';
import { Workspace } from '../models/workspace';
import { WorkspaceResponse } from '../models/workspace-response';

@Injectable({ providedIn: 'root' })
export class WorkspaceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createWorkspace()` */
  static readonly CreateWorkspacePath = '/workspace/add-workspace';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createWorkspace()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createWorkspace$Response(params?: CreateWorkspace$Params, context?: HttpContext): Observable<StrictHttpResponse<Workspace>> {
    return createWorkspace(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createWorkspace$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createWorkspace(params?: CreateWorkspace$Params, context?: HttpContext): Observable<Workspace> {
    return this.createWorkspace$Response(params, context).pipe(
      map((r: StrictHttpResponse<Workspace>): Workspace => r.body)
    );
  }

  /** Path part for operation `updateWorkspace()` */
  static readonly UpdateWorkspacePath = '/workspace/update-workspace/{workspace_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateWorkspace()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateWorkspace$Response(params: UpdateWorkspace$Params, context?: HttpContext): Observable<StrictHttpResponse<Workspace>> {
    return updateWorkspace(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateWorkspace$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateWorkspace(params: UpdateWorkspace$Params, context?: HttpContext): Observable<Workspace> {
    return this.updateWorkspace$Response(params, context).pipe(
      map((r: StrictHttpResponse<Workspace>): Workspace => r.body)
    );
  }

  /** Path part for operation `getWorkspace()` */
  static readonly GetWorkspacePath = '/workspace/get-workspace/{organization_id}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWorkspace()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkspace$Response(params: GetWorkspace$Params, context?: HttpContext): Observable<StrictHttpResponse<WorkspaceResponse>> {
    return getWorkspace(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWorkspace$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkspace(params: GetWorkspace$Params, context?: HttpContext): Observable<WorkspaceResponse> {
    return this.getWorkspace$Response(params, context).pipe(
      map((r: StrictHttpResponse<WorkspaceResponse>): WorkspaceResponse => r.body)
    );
  }

  /** Path part for operation `deleteWorkspace()` */
  static readonly DeleteWorkspacePath = '/workspace/delete-workspace/{workspace_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteWorkspace()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkspace$Response(params: DeleteWorkspace$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteWorkspace(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteWorkspace$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWorkspace(params: DeleteWorkspace$Params, context?: HttpContext): Observable<void> {
    return this.deleteWorkspace$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
