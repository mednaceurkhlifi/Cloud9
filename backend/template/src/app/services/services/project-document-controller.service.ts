/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addDocumentsToModule } from '../fn/project-document-controller/add-documents-to-module';
import { AddDocumentsToModule$Params } from '../fn/project-document-controller/add-documents-to-module';
import { addDocumentsToProject } from '../fn/project-document-controller/add-documents-to-project';
import { AddDocumentsToProject$Params } from '../fn/project-document-controller/add-documents-to-project';
import { addDocumentsToTask } from '../fn/project-document-controller/add-documents-to-task';
import { AddDocumentsToTask$Params } from '../fn/project-document-controller/add-documents-to-task';
import { deleteDocument } from '../fn/project-document-controller/delete-document';
import { DeleteDocument$Params } from '../fn/project-document-controller/delete-document';
import { getDocument } from '../fn/project-document-controller/get-document';
import { GetDocument$Params } from '../fn/project-document-controller/get-document';
import { getImage } from '../fn/project-document-controller/get-image';
import { GetImage$Params } from '../fn/project-document-controller/get-image';
import { ProjectDocument } from '../models/project-document';

@Injectable({ providedIn: 'root' })
export class ProjectDocumentControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addDocumentsToProject()` */
  static readonly AddDocumentsToProjectPath = '/project-document/add-documents-project/{project_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addDocumentsToProject()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addDocumentsToProject$Response(params: AddDocumentsToProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectDocument>>> {
    return addDocumentsToProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addDocumentsToProject$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addDocumentsToProject(params: AddDocumentsToProject$Params, context?: HttpContext): Observable<Array<ProjectDocument>> {
    return this.addDocumentsToProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectDocument>>): Array<ProjectDocument> => r.body)
    );
  }

  /** Path part for operation `addDocumentsToTask()` */
  static readonly AddDocumentsToTaskPath = '/project-document/add-documents-module/{task_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addDocumentsToTask()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addDocumentsToTask$Response(params: AddDocumentsToTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectDocument>>> {
    return addDocumentsToTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addDocumentsToTask$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addDocumentsToTask(params: AddDocumentsToTask$Params, context?: HttpContext): Observable<Array<ProjectDocument>> {
    return this.addDocumentsToTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectDocument>>): Array<ProjectDocument> => r.body)
    );
  }

  /** Path part for operation `addDocumentsToModule()` */
  static readonly AddDocumentsToModulePath = '/project-document/add-documents-module/{module_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addDocumentsToModule()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addDocumentsToModule$Response(params: AddDocumentsToModule$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectDocument>>> {
    return addDocumentsToModule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addDocumentsToModule$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  addDocumentsToModule(params: AddDocumentsToModule$Params, context?: HttpContext): Observable<Array<ProjectDocument>> {
    return this.addDocumentsToModule$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectDocument>>): Array<ProjectDocument> => r.body)
    );
  }

  /** Path part for operation `getImage()` */
  static readonly GetImagePath = '/project-document/images/{filename}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getImage()` instead.
   *
   * This method doesn't expect any request body.
   */
  getImage$Response(params: GetImage$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getImage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getImage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getImage(params: GetImage$Params, context?: HttpContext): Observable<Blob> {
    return this.getImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getDocument()` */
  static readonly GetDocumentPath = '/project-document/documents/{filename}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDocument()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDocument$Response(params: GetDocument$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getDocument(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDocument$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDocument(params: GetDocument$Params, context?: HttpContext): Observable<Blob> {
    return this.getDocument$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `deleteDocument()` */
  static readonly DeleteDocumentPath = '/project-document/delete-document/{document_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDocument()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDocument$Response(params: DeleteDocument$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return deleteDocument(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDocument$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDocument(params: DeleteDocument$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.deleteDocument$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
