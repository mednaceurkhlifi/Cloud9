/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNewMeeting } from '../fn/meeting-controller/create-new-meeting';
import { CreateNewMeeting$Params } from '../fn/meeting-controller/create-new-meeting';
import { deleteMeeting } from '../fn/meeting-controller/delete-meeting';
import { DeleteMeeting$Params } from '../fn/meeting-controller/delete-meeting';
import { getInvitedMeetings } from '../fn/meeting-controller/get-invited-meetings';
import { GetInvitedMeetings$Params } from '../fn/meeting-controller/get-invited-meetings';
import { getMeetingById } from '../fn/meeting-controller/get-meeting-by-id';
import { GetMeetingById$Params } from '../fn/meeting-controller/get-meeting-by-id';
import { getUserMeetings } from '../fn/meeting-controller/get-user-meetings';
import { GetUserMeetings$Params } from '../fn/meeting-controller/get-user-meetings';
import { inviteToMeeting } from '../fn/meeting-controller/invite-to-meeting';
import { InviteToMeeting$Params } from '../fn/meeting-controller/invite-to-meeting';
import { MeetingProjection } from '../models/meeting-projection';
import { MeetingResponse } from '../models/meeting-response';

@Injectable({ providedIn: 'root' })
export class MeetingControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createNewMeeting()` */
  static readonly CreateNewMeetingPath = '/meeting/create-new-meeting';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNewMeeting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNewMeeting$Response(params: CreateNewMeeting$Params, context?: HttpContext): Observable<StrictHttpResponse<MeetingProjection>> {
    return createNewMeeting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNewMeeting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNewMeeting(params: CreateNewMeeting$Params, context?: HttpContext): Observable<MeetingProjection> {
    return this.createNewMeeting$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeetingProjection>): MeetingProjection => r.body)
    );
  }

  /** Path part for operation `inviteToMeeting()` */
  static readonly InviteToMeetingPath = '/meeting/invite-to-meeting/{meeting_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inviteToMeeting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inviteToMeeting$Response(params: InviteToMeeting$Params, context?: HttpContext): Observable<StrictHttpResponse<MeetingProjection>> {
    return inviteToMeeting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inviteToMeeting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inviteToMeeting(params: InviteToMeeting$Params, context?: HttpContext): Observable<MeetingProjection> {
    return this.inviteToMeeting$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeetingProjection>): MeetingProjection => r.body)
    );
  }

  /** Path part for operation `getUserMeetings()` */
  static readonly GetUserMeetingsPath = '/meeting/get-user-meetings/{user_email}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserMeetings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserMeetings$Response(params: GetUserMeetings$Params, context?: HttpContext): Observable<StrictHttpResponse<MeetingResponse>> {
    return getUserMeetings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserMeetings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserMeetings(params: GetUserMeetings$Params, context?: HttpContext): Observable<MeetingResponse> {
    return this.getUserMeetings$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeetingResponse>): MeetingResponse => r.body)
    );
  }

  /** Path part for operation `getMeetingById()` */
  static readonly GetMeetingByIdPath = '/meeting/get-meeting/{meeting_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMeetingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeetingById$Response(params: GetMeetingById$Params, context?: HttpContext): Observable<StrictHttpResponse<MeetingProjection>> {
    return getMeetingById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMeetingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeetingById(params: GetMeetingById$Params, context?: HttpContext): Observable<MeetingProjection> {
    return this.getMeetingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeetingProjection>): MeetingProjection => r.body)
    );
  }

  /** Path part for operation `getInvitedMeetings()` */
  static readonly GetInvitedMeetingsPath = '/meeting/get-invited-meetings/{user_email}/{size}/{page_no}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInvitedMeetings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvitedMeetings$Response(params: GetInvitedMeetings$Params, context?: HttpContext): Observable<StrictHttpResponse<MeetingResponse>> {
    return getInvitedMeetings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInvitedMeetings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvitedMeetings(params: GetInvitedMeetings$Params, context?: HttpContext): Observable<MeetingResponse> {
    return this.getInvitedMeetings$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeetingResponse>): MeetingResponse => r.body)
    );
  }

  /** Path part for operation `deleteMeeting()` */
  static readonly DeleteMeetingPath = '/meeting/delete-meeting/{meeting_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMeeting()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMeeting$Response(params: DeleteMeeting$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return deleteMeeting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMeeting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMeeting(params: DeleteMeeting$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.deleteMeeting$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
