/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOfficeAndAssignToOrganisation } from '../fn/office-controller/add-office-and-assign-to-organisation';
import { AddOfficeAndAssignToOrganisation$Params } from '../fn/office-controller/add-office-and-assign-to-organisation';
import { deleteOffice } from '../fn/office-controller/delete-office';
import { DeleteOffice$Params } from '../fn/office-controller/delete-office';
import { getAllOfficesByOrganisationId } from '../fn/office-controller/get-all-offices-by-organisation-id';
import { GetAllOfficesByOrganisationId$Params } from '../fn/office-controller/get-all-offices-by-organisation-id';
import { getOfficeById } from '../fn/office-controller/get-office-by-id';
import { GetOfficeById$Params } from '../fn/office-controller/get-office-by-id';
import { Office } from '../models/office';
import { updateOffice } from '../fn/office-controller/update-office';
import { UpdateOffice$Params } from '../fn/office-controller/update-office';

@Injectable({ providedIn: 'root' })
export class OfficeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addOfficeAndAssignToOrganisation()` */
  static readonly AddOfficeAndAssignToOrganisationPath = '/offices/assign-to-organisation/{organisationId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOfficeAndAssignToOrganisation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOfficeAndAssignToOrganisation$Response(params: AddOfficeAndAssignToOrganisation$Params, context?: HttpContext): Observable<StrictHttpResponse<Office>> {
    return addOfficeAndAssignToOrganisation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOfficeAndAssignToOrganisation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOfficeAndAssignToOrganisation(params: AddOfficeAndAssignToOrganisation$Params, context?: HttpContext): Observable<Office> {
    return this.addOfficeAndAssignToOrganisation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Office>): Office => r.body)
    );
  }

  /** Path part for operation `updateOffice()` */
  static readonly UpdateOfficePath = '/offices/updateOffice/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateOffice()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateOffice$Response(params: UpdateOffice$Params, context?: HttpContext): Observable<StrictHttpResponse<Office>> {
    return updateOffice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateOffice$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateOffice(params: UpdateOffice$Params, context?: HttpContext): Observable<Office> {
    return this.updateOffice$Response(params, context).pipe(
      map((r: StrictHttpResponse<Office>): Office => r.body)
    );
  }

  /** Path part for operation `getOfficeById()` */
  static readonly GetOfficeByIdPath = '/offices/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOfficeById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficeById$Response(params: GetOfficeById$Params, context?: HttpContext): Observable<StrictHttpResponse<Office>> {
    return getOfficeById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOfficeById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficeById(params: GetOfficeById$Params, context?: HttpContext): Observable<Office> {
    return this.getOfficeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Office>): Office => r.body)
    );
  }

  /** Path part for operation `getAllOfficesByOrganisationId()` */
  static readonly GetAllOfficesByOrganisationIdPath = '/offices/by-organisation/{organisationId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOfficesByOrganisationId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOfficesByOrganisationId$Response(params: GetAllOfficesByOrganisationId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Office>>> {
    return getAllOfficesByOrganisationId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOfficesByOrganisationId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOfficesByOrganisationId(params: GetAllOfficesByOrganisationId$Params, context?: HttpContext): Observable<Array<Office>> {
    return this.getAllOfficesByOrganisationId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Office>>): Array<Office> => r.body)
    );
  }

  /** Path part for operation `deleteOffice()` */
  static readonly DeleteOfficePath = '/offices/deleteOffice/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOffice()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOffice$Response(params: DeleteOffice$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteOffice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOffice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOffice(params: DeleteOffice$Params, context?: HttpContext): Observable<void> {
    return this.deleteOffice$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
