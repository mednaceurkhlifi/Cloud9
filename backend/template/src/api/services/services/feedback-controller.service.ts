/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addFeedbackToOrganization } from '../fn/feedback-controller/add-feedback-to-organization';
import { AddFeedbackToOrganization$Params } from '../fn/feedback-controller/add-feedback-to-organization';
import { Feedback } from '../models/feedback';
import { FeedBackDto } from '../models/feed-back-dto';
import { getFeedbacks } from '../fn/feedback-controller/get-feedbacks';
import { GetFeedbacks$Params } from '../fn/feedback-controller/get-feedbacks';
import { getFeedbacksByOrganization } from '../fn/feedback-controller/get-feedbacks-by-organization';
import { GetFeedbacksByOrganization$Params } from '../fn/feedback-controller/get-feedbacks-by-organization';
import { markFeedbackAsRead } from '../fn/feedback-controller/mark-feedback-as-read';
import { MarkFeedbackAsRead$Params } from '../fn/feedback-controller/mark-feedback-as-read';
import { respondToFeedback } from '../fn/feedback-controller/respond-to-feedback';
import { RespondToFeedback$Params } from '../fn/feedback-controller/respond-to-feedback';

@Injectable({ providedIn: 'root' })
export class FeedbackControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `markFeedbackAsRead()` */
  static readonly MarkFeedbackAsReadPath = '/feedbacks/{feedbackId}/mark-as-read';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markFeedbackAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markFeedbackAsRead$Response(params: MarkFeedbackAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<Feedback>> {
    return markFeedbackAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markFeedbackAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markFeedbackAsRead(params: MarkFeedbackAsRead$Params, context?: HttpContext): Observable<Feedback> {
    return this.markFeedbackAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<Feedback>): Feedback => r.body)
    );
  }

  /** Path part for operation `getFeedbacksByOrganization()` */
  static readonly GetFeedbacksByOrganizationPath = '/feedbacks/organization/{organisationId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFeedbacksByOrganization()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbacksByOrganization$Response(params: GetFeedbacksByOrganization$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Feedback>>> {
    return getFeedbacksByOrganization(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFeedbacksByOrganization$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbacksByOrganization(params: GetFeedbacksByOrganization$Params, context?: HttpContext): Observable<Array<Feedback>> {
    return this.getFeedbacksByOrganization$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Feedback>>): Array<Feedback> => r.body)
    );
  }

  /** Path part for operation `addFeedbackToOrganization()` */
  static readonly AddFeedbackToOrganizationPath = '/feedbacks/organization/{organisationId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addFeedbackToOrganization()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addFeedbackToOrganization$Response(params: AddFeedbackToOrganization$Params, context?: HttpContext): Observable<StrictHttpResponse<Feedback>> {
    return addFeedbackToOrganization(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addFeedbackToOrganization$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addFeedbackToOrganization(params: AddFeedbackToOrganization$Params, context?: HttpContext): Observable<Feedback> {
    return this.addFeedbackToOrganization$Response(params, context).pipe(
      map((r: StrictHttpResponse<Feedback>): Feedback => r.body)
    );
  }

  /** Path part for operation `respondToFeedback()` */
  static readonly RespondToFeedbackPath = '/feedbacks/feedbacks/respond/{feedbackId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `respondToFeedback()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  respondToFeedback$Response(params: RespondToFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return respondToFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `respondToFeedback$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  respondToFeedback(params: RespondToFeedback$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.respondToFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `getFeedbacks()` */
  static readonly GetFeedbacksPath = '/feedbacks/user/feedbacks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFeedbacks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbacks$Response(params?: GetFeedbacks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FeedBackDto>>> {
    return getFeedbacks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFeedbacks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFeedbacks(params?: GetFeedbacks$Params, context?: HttpContext): Observable<Array<FeedBackDto>> {
    return this.getFeedbacks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FeedBackDto>>): Array<FeedBackDto> => r.body)
    );
  }

}
