/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createOrganisation } from '../fn/organisation-controller/create-organisation';
import { CreateOrganisation$Params } from '../fn/organisation-controller/create-organisation';
import { deleteOrganisation } from '../fn/organisation-controller/delete-organisation';
import { DeleteOrganisation$Params } from '../fn/organisation-controller/delete-organisation';
import { getAllOrganisations } from '../fn/organisation-controller/get-all-organisations';
import { GetAllOrganisations$Params } from '../fn/organisation-controller/get-all-organisations';
import { getAllOrganizationsEntityCounts } from '../fn/organisation-controller/get-all-organizations-entity-counts';
import { GetAllOrganizationsEntityCounts$Params } from '../fn/organisation-controller/get-all-organizations-entity-counts';
import { getAverageRate } from '../fn/organisation-controller/get-average-rate';
import { GetAverageRate$Params } from '../fn/organisation-controller/get-average-rate';
import { getGlobalStatistics } from '../fn/organisation-controller/get-global-statistics';
import { GetGlobalStatistics$Params } from '../fn/organisation-controller/get-global-statistics';
import { getImage } from '../fn/organisation-controller/get-image';
import { GetImage$Params } from '../fn/organisation-controller/get-image';
import { getOfficesCountByOrganization } from '../fn/organisation-controller/get-offices-count-by-organization';
import { GetOfficesCountByOrganization$Params } from '../fn/organisation-controller/get-offices-count-by-organization';
import { getOrganisationById } from '../fn/organisation-controller/get-organisation-by-id';
import { GetOrganisationById$Params } from '../fn/organisation-controller/get-organisation-by-id';
import { Organization } from '../models/organization';
import { OrganizationEntityCountsDto } from '../models/organization-entity-counts-dto';
import { updateOrganisation } from '../fn/organisation-controller/update-organisation';
import { UpdateOrganisation$Params } from '../fn/organisation-controller/update-organisation';

@Injectable({ providedIn: 'root' })
export class OrganisationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllOrganisations()` */
  static readonly GetAllOrganisationsPath = '/organisations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOrganisations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrganisations$Response(params?: GetAllOrganisations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Organization>>> {
    return getAllOrganisations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOrganisations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrganisations(params?: GetAllOrganisations$Params, context?: HttpContext): Observable<Array<Organization>> {
    return this.getAllOrganisations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Organization>>): Array<Organization> => r.body)
    );
  }

  /** Path part for operation `createOrganisation()` */
  static readonly CreateOrganisationPath = '/organisations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOrganisation()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createOrganisation$Response(params?: CreateOrganisation$Params, context?: HttpContext): Observable<StrictHttpResponse<Organization>> {
    return createOrganisation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOrganisation$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createOrganisation(params?: CreateOrganisation$Params, context?: HttpContext): Observable<Organization> {
    return this.createOrganisation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Organization>): Organization => r.body)
    );
  }

  /** Path part for operation `getOrganisationById()` */
  static readonly GetOrganisationByIdPath = '/organisations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrganisationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrganisationById$Response(params: GetOrganisationById$Params, context?: HttpContext): Observable<StrictHttpResponse<Organization>> {
    return getOrganisationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrganisationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrganisationById(params: GetOrganisationById$Params, context?: HttpContext): Observable<Organization> {
    return this.getOrganisationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Organization>): Organization => r.body)
    );
  }

  /** Path part for operation `updateOrganisation()` */
  static readonly UpdateOrganisationPath = '/organisations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateOrganisation()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateOrganisation$Response(params: UpdateOrganisation$Params, context?: HttpContext): Observable<StrictHttpResponse<Organization>> {
    return updateOrganisation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateOrganisation$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateOrganisation(params: UpdateOrganisation$Params, context?: HttpContext): Observable<Organization> {
    return this.updateOrganisation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Organization>): Organization => r.body)
    );
  }

  /** Path part for operation `getAverageRate()` */
  static readonly GetAverageRatePath = '/organisations/{organizationId}/average-rate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAverageRate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAverageRate$Response(params: GetAverageRate$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getAverageRate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAverageRate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAverageRate(params: GetAverageRate$Params, context?: HttpContext): Observable<number> {
    return this.getAverageRate$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getOfficesCountByOrganization()` */
  static readonly GetOfficesCountByOrganizationPath = '/organisations/offices-count';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOfficesCountByOrganization()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficesCountByOrganization$Response(params?: GetOfficesCountByOrganization$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getOfficesCountByOrganization(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOfficesCountByOrganization$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficesCountByOrganization(params?: GetOfficesCountByOrganization$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getOfficesCountByOrganization$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getImage()` */
  static readonly GetImagePath = '/organisations/images/{filename}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getImage()` instead.
   *
   * This method doesn't expect any request body.
   */
  getImage$Response(params: GetImage$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getImage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getImage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getImage(params: GetImage$Params, context?: HttpContext): Observable<Blob> {
    return this.getImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getGlobalStatistics()` */
  static readonly GetGlobalStatisticsPath = '/organisations/global';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGlobalStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGlobalStatistics$Response(params?: GetGlobalStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return getGlobalStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGlobalStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGlobalStatistics(params?: GetGlobalStatistics$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.getGlobalStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getAllOrganizationsEntityCounts()` */
  static readonly GetAllOrganizationsEntityCountsPath = '/organisations/counts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOrganizationsEntityCounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrganizationsEntityCounts$Response(params?: GetAllOrganizationsEntityCounts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrganizationEntityCountsDto>>> {
    return getAllOrganizationsEntityCounts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOrganizationsEntityCounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrganizationsEntityCounts(params?: GetAllOrganizationsEntityCounts$Params, context?: HttpContext): Observable<Array<OrganizationEntityCountsDto>> {
    return this.getAllOrganizationsEntityCounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrganizationEntityCountsDto>>): Array<OrganizationEntityCountsDto> => r.body)
    );
  }

  /** Path part for operation `deleteOrganisation()` */
  static readonly DeleteOrganisationPath = '/organisations/IsDeleted/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOrganisation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrganisation$Response(params: DeleteOrganisation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteOrganisation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOrganisation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrganisation(params: DeleteOrganisation$Params, context?: HttpContext): Observable<void> {
    return this.deleteOrganisation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
